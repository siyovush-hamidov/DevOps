---
- name: Install PostgreSQL and create database and user
  hosts: all
  become: yes

  vars: # так объявляются глобальные переменные для этого playbook
    db_user: oscar
    db_pass: database
    db_name: database
    postgres_password: postgres

  tasks:
    - name: Install PostgreSQL on Debian-based systems
      apt:
        name: postgresql
        state: present
        update_cache: yes

    - name: Start and enable PostgreSQL service
      systemd:
        name: postgresql
        enabled: yes
        state: started

    - name: Ensure PostgreSQL is running
      service: # информативынй модуль для работы со службами 
        name: postgresql
        state: started

    - name: Install psycopg2 for Ansible PostgreSQL modules
      apt:
        name: python3-psycopg2
        state: present

    - name: Get PostgreSQL version
      command: psql --version # команда для выполнения в терминале
      register: psql_version_output # так сохраняется вывод этой команды в переменную psql_version_output

    - name: Set PostgreSQL version fact
      set_fact: # модуль использующий boolean, который позволяет устанавливать переменные
        postgresql_version: "{{ psql_version_output.stdout.split(' ')[2].split('.')[0] }}"
      # psql_version_output.stdout.split(' ') сохраняет вывод вида psql (PostgreSQL) 15.5
      # в таком формате ['psql', '(PostgreSQL)', '15.5']
      # чтобы получить третий элемент, достаем его по индексу [2] и делим его точкой полчаем 15, 5,
      # достаём отсюда первый элемент по индексу [0]


    - name: Backup the original pg_hba.conf
      copy: # то же самое что и ansible.builtin.copy
        src: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf.bak"
        remote_src: yes # указывает на то что исходник находится в удаленной машине

    - name: Update pg_hba.conf to use trust authentication for local
      lineinfile: # нужен для манипуляции строками в файле
        path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        regexp: '^local.*all.*all.*' # регулярное выражение для поиска строк
        # я поставил trust потому что заколебался с этими паролями :(
        line: 'local   all             all                                     trust' #строка которуб надо вставить
        insertafter: '^# "local" is for Unix domain socket connections only' # вставляет строку после этого комментария

    - name: Update pg_hba.conf to use trust authentication for IPv4
      lineinfile:
        path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        regexp: '^host.*all.*all.*127\.0\.0\.1/32.*'
        line: 'host    all             all             127.0.0.1/32            trust'
        insertafter: '^# IPv4 local connections:'

    - name: Update pg_hba.conf to use trust authentication for IPv6
      lineinfile:
        path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        regexp: '^host.*all.*all.*::1/128.*'
        line: 'host    all             all             ::1/128                 trust'
        insertafter: '^# IPv6 local connections:'

    - name: Add line to pg_hba.conf for samerole
      lineinfile:
        path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        line: 'host    samerole       all             0.0.0.0/0               trust'
        state: present # если строки нет, то он вставляет ее
        insertafter: EOF # Это вставляет строку в конец файла

    - name: Update postgresql.conf to listen on all addresses
      replace: # модуль для замены строк в файле
        path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
        regexp: "^#listen_addresses = '\\*' # what IP address\\(es\\) to listen on;" # Ищем это и заменяем
        replace: "listen_addresses = '*' \n# what IP address(es) to listen on;" # На это

    - name: Restart PostgreSQL to apply changes
      systemd:
        name: postgresql
        state: restarted

    - name: Set password for postgres user
      postgresql_user: # модуль для управления пользователями в postgresql
        name: postgres
        password: "{{ postgres_password }}" # пароль пользователя
        role_attr_flags: "SUPERUSER" # присваиваем суперюзер
        state: present
        login_user: postgres
        login_password: "{{ postgres_password }}" # пароль для подключения

    - name: Create PostgreSQL user
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        state: present
        login_user: postgres
        login_password: "{{ postgres_password }}"

    - name: Create PostgreSQL database
      postgresql_db: # то же самое но уже для работы с базами данных, а не пользователями
        name: "{{ db_name }}"
        owner: "{{ db_user }}"
        state: present
        login_user: postgres
        login_password: "{{ postgres_password }}"
